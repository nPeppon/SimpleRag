{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"metadata": {"source": "https://lilianweng.github.io/posts/2024-02-05-human-data-quality/", "title": "Thinking about High-Quality Human Data | Lil'Log", "description": "[Special thank you to Ian Kivlichan for many useful pointers (E.g. the 100+ year old Nature paper \u201cVox populi\u201d) and nice feedback. \ud83d\ude4f ]\nHigh-quality data is the fuel for modern data deep learning model training. Most of the task-specific labeled data comes from human annotation, such as classification task or RLHF labeling (which can be constructed as classification format) for LLM alignment training. Lots of ML techniques in the post can help with data quality, but fundamentally human data collection involves attention to details and careful execution.", "language": "en", "source_url": "https://lilianweng.github.io/posts/2024-02-05-human-data-quality/", "type": "whole_document"}, "page_content": "\n\n\n\n\n\nThinking about High-Quality Human Data | Lil'Log\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLil'Log\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPosts\n\n\n\n\nArchive\n\n\n\n\nSearch\n\n\n\n\nTags\n\n\n\n\nFAQ\n\n\n\n\nemojisearch.app\n\n\n\n\n\n\n\n\n\n      Thinking about High-Quality Human Data\n    \nDate: February 5, 2024  |  Estimated Reading Time: 21 min  |  Author: Lilian Weng\n\n\n \n\n\nTable of Contents\n\n\n\nHuman Raters \u2194 Data Quality\n\nThe Wisdom of the Crowd\n\nRater Agreement\n\nRater Disagreement & Two Paradigms\n\n\nData Quality \u2194 Model Training\n\nInfluence Functions\n\nPrediction Changes during Training\n\nNoisy Cross-Validation\n\n\nCitation\n\nReferences\n\n\n\n\n\n[Special thank you to Ian Kivlichan for many useful pointers (E.g. the 100+ year old Nature paper \u201cVox populi\u201d) and nice feedback. \ud83d\ude4f ]\nHigh-quality data is the fuel for modern data deep learning model training. Most of the task-specific labeled data comes from human annotation, such as classification task or RLHF labeling (which can be constructed as classification format) for LLM alignment training. Lots of ML techniques in the post can help with data quality, but fundamentally human data collection involves attention to details and careful execution. The community knows the value of high quality data, but somehow we have this subtle impression that \u201cEveryone wants to do the model work, not the data work\u201d (Sambasivan et al. 2021).\n\nFig. 1. Two directions to approach high data quality.\nHuman Raters \u2194 Data Quality#\nCollecting human data involve a set of operation steps and every step contributes to the data quality:\n\nTask design: Design task workflow to improve clarity and reduce complexity. Detailed guidelines are helpful but very long and complicated guidelines demand a decent amount of training to be useful.\nSelect and train a pool of raters: Select annotators with matched skillset and consistency. Training sessions are necessary. After onboarding, regular feedback and calibration sessions are also needed.\nCollect and aggregate data. This is the stage where more ML techniques can be applied to clean, filter and smartly aggregate data to identify the true labels.\n\n\nFig. 2. Quality assurance refers to a set of actions that allow one to improve quality by acting on the quality attributes identified in the quality model. (Image source: Daniel et al. 2018)\nThe Wisdom of the Crowd#\nVox populi (originally \u201cVox populi, vox Dei\u201d), a Latin phrase, means the voice of people. A short paper named was the same name was published in 1907 on Nature. It tracked an event at an annual exhibition where a fat ox was selected and people would guess the weight of the ox in order to win a prize if the guess is close to the real number. The middlemost estimate was treated as \u201cthe vox populi\u201d and ended up being very close to the true value. The author concluded \u201cThis result is, I think, more creditable to the trustworthiness of a democratic judgment than might have been expected.\u201d This is probably the earliest mention of how crowdsourcing (\u201cthe wisdom of the crowd\u201d) would work out.\nAlmost 100 years later, Callison-Burch (2009) did an early study on using Amazon Mechanical Turk (AMT) to run non-expert human evaluation on Machine Translation (MT) tasks and even to rely on non-experts to create new gold reference translations. The setup for human evaluation was simple: Each turker is shown a source sentence, a reference translation, and 5 translations from 5 MT systems. They are asked to rank 5 translations from best to worst. Each task is completed by 5 turkers.\nUnsurprisingly, there are spammers producing low quality annotation to only optimize the volume. So when measuring the agreement between experts and non-experts, different weighting schemes need to be applied to downweight the contribution of spammers: (1) \u201cweighted by experts\u201d: using agreement rate with experts on a gold set of 10 examples; (2) \u201cweighted by non-experts\u201d: relying on agreement rate with the rest of turkers on the whole dataset.\nIn a harder task, non-expert human annotators were asked to create new gold reference translations. Callison-Burch designed the task in two stages, where the first stage created new translations with reference to MT outputs and the second one filtered translations that may seem to be gerated by a MT system. The correlation between experts\u2019 and crowdsourced translations is higher than that between expert and MT system outputs.\n\nFig. 3. (Left) The agreement rate is measured by comparing each pair of translation sentences (\"A > B\", \"A=B\", \"A < B\") and thus chance agreement is 1/3. The upper bound is set by the expert-expert agreement rate. (Right) Comparison of BLEU score between translations from different sources. LCD (Linguistic Data Consortium) translators provide expert translations. (Image source: Callison-Burch 2009)\nRater Agreement#\nWe often think of annotation as targeting a single ground truth and try to evaluate quality against one gold answer with consistent standards. A common practice for finding reliable ground truth labels is to collect multiple labels from multiple raters. Assuming that each rater performs at a different level of quality, we can use a weighted average of annotations but weighted by a proficiency score. This score is often approximated by how often one rater agrees with others.\nMajority Voting: Taking the majority vote is the simplest way of aggregation, equivalent to taking the mode of a set of labels. In this setting, every annotator is contributing equally.\nRaw agreement (Tratz & Hovy, 2010): Raw agreement counts the percentage of other people agreeing with them. This is indirectly correlated to majority vote, because all members of the majority class are expected to get higher inter-annotator agreement rate.\nCohen\u2019s Kappa (Landis & Koch, 1977): Cohen\u2019s kappa measures the inter-rater agreement in the form of $\\kappa = (p_o - p_e) / (1 - p_c)$, where $p_o$ is the raw agreement rate and $p_e$ is the agreement by chance. Cohen\u2019s kappa has a correction term for agreeing by chance, but this correction may be overestimated if one label is more prevalent.\nProbabilistic Graph Modeling: There is a body of work relying on probabilistic graph modeling to model different factors within annotation decisions, e.g. difficulty of the task, task latent topics, rater bias, rater confidence, and then predict the true labels accordingly. Zheng et al. (2017)  compared 17 algorithms on truth inference in crowdsourcing and most of them are probabilistic graph models.\n\nMACE (Multi-Annotator Competence Estimation; Hovy et al. 2013) is an early example of using graph modeling to estimate the likelihood of someone acting like a \u201cspammer\u201d by providing random labels. Unsurprisingly in cases when the incentive is misaligned, some annotators may behave as \u201cspammers\u201d to optimize the volume of tasks completed for higher pay. The goal of MACE is to identify spammers. Given a task $i$ and an annotator $j$, $T_i$ is the true label, $A_{ij}$ is the assigned label and $S_{ij}$ models the probability of annotator $j$ spamming. Then the generative process can be represented as belows. The parameter $\\theta_j$ defines the trustworthiness of the annotator $j$ (probability of not spamming) and the parameter $\\xi_j$  defines how an annotator behaves when they are spamming.\n\n\n$$\n\\begin{align}\n& \\text{for } i = 1 \\dots N : \\\\\n& \\quad T_i \\sim \\text{Uniform} \\\\\n& \\quad \\text{for } j = 1 \\dots M : \\\\\n& \\quad \\quad S_{ij} \\sim \\text{Bernoulli}(1 - \\theta_j) \\\\\n& \\quad \\quad \\text{if } S_{ij} = 0 : \\\\\n& \\quad \\quad \\quad A_{ij} = T_i \\\\\n& \\quad \\quad \\text{else } : \\\\\n& \\quad \\quad \\quad A_{ij} \\sim \\text{Multinomial}(\\xi_j) \\\\\n\\end{align}\n$$\n\nThen we can learn $\\theta, \\xi$ to maximize the observed data, in the form of the marginal data likelihood, where $A$ is the matrix of annotations, $S$ is the matrix of competence indicators and $T$ is the matrix of true labels:\n\n$$\nP(A; \\theta, \\xi) = \\sum_{T, S} \\big[ \\prod_{i=1}^N P(T_i) \\cdot \\prod_{j=1}^M P(S_{ij}; \\theta_j) \\cdot P(A_{ij} \\vert S_{ij}, T_i; \\xi_j) \\big]\n$$\n\nEither EM (Expectation\u2013maximization) or VB (Variational Bayes) can be applied to maximize the above marginal likelihood. During EM optimization, at M-step, a fixed value $\\delta$ is added to the fractional counts before normalizing. During VB training, they applied symmetric Beta priors on $\\theta_j$  and symmetric Dirichlet priors on $\\xi_j$. When recovering the correct answers, we can take majority vote weighted by the annotators\u2019 $\\theta$ estimates.\nRater Disagreement & Two Paradigms#\nThe aggregation process described above depends on an assumption that there exists one underlying gold answer and thus we can evaluate annotators\u2019 performance accordingly. However, in many topics, especially in safety, social, or cultural areas, people can disagree and often this disagreement is valid and then it comes down to how much we want to apply a strict rule versus embracing diversity.\nAroyo & Welty (2015) discussed a set of \u201cmyths\u201d in the practice of human annotation collection and found all of them somewhat inaccurate, key findings including:\n\nOften there is more than one correct interpretation for some samples. We need diverse perspectives via e.g. having multiple people to review annotation quality.\nDisagreement is not always bad. We should reduce disagreements caused by errors or poorly designed process but other disagreements can give us rich information.\n\nIf it is caused by a task not well defined, we should enhance the instruction. However, a more detailed guideline does not resolve innate diversity among opinions.\n\n\nExperts may not always be better than lay people, but they would have a big gap in terms of considering what\u2019s important.\nGround truth annotations can change in time, especially those related to timely events or news.\n\nLater, Rottger et al. (2021) formulated the difference into two contrasting paradigms for data annotation for subjective NLP tasks.\n\n\n\n\nDescriptive\nPrescriptive\n\n\n\n\nDefinition\nEncourage annotator subjectivity, trying to model many beliefs.\nDiscourage annotator subjectivity, trying to consistently apply one belief.\n\n\nPros\n- Can help to identify which entries are more subjective;- Embrace diversity\n- More aligned with standard NLP setup. - Easier to do QC by measuring disagreement or doing label aggregation.\n\n\nCons\n- Metrics like rater disagreement cannot be used to measure data quality or annotator performance; - Cannot be used for training models that are optimized for outputting one preset behavior.\n- Expensive and challenging to create high-quality annotation guidelines, which can never be perfect, in practice;- Training annotators to get familiar with guideline in order to apply it properly is also challenging;- Cannot capture an interpretable diversity of beliefs or consistently encode one specific belief.\n\n\n\nThe descriptive paradigm allows us to understand a number of important effects as well as to account for different perspectives. For example, annotator identity (e.g. African American, LGBTQ) is found to be a statistically significant factor in how they would label identify-related content as toxic (Goyal et al. 2022). Topics can be another main driver for diverse opinions. Wang et al. (2023) studied the human evaluation process of safety of an AI conversation system and compared results between labels by Trust & Safety (T&S) professionals and crowdsourcing annotators. They intentionally collected rich metadata associated with crowd annotators like demographic or behavior information. Comparing T&S expert labels and crowd annotations, they found that agreement rates vary across semantic topics and the level of severity:\n\nAgreement rate differs a lot across different topics; ranging from 0.96 on violence/gory to 0.25 on personal topics.\nAgreement rates are higher on \u201cextreme\u201d and \u201cbenign\u201d conversations, given four label options marking \u201cbenign\u201d, \u201cdebatable\u201d, \u201cmoderate\u201d to \u201cextreme\u201d.\n\n\nFig. 4. Correlations between non-expert and expert annotations vary a lot across topics. (Image source: Wang et al. 2023)\nZhang et al. (2023) proposed a taxonomy of rater disagreement to analyze the root causes. Among the listed causes, disagreement due to stochastic errors or inconsistency on the individual level should be avoided. In cases when a rater gives different labels to the same task when asked multiple times, some of those are most likely caused by human errors. Based on this intuition, the disagreement deconvolution method (Gordon et al. 2021) disentangles stable opinions from errors by anchoring each individual\u2019s opinion to their own primary label and thus encouraging intra-rater consistency.\n\nFig. 5. A taxonomy of causes for rater disagreement. (Image source: Zhang et al. 2023)\nDisagreement deconvolution relies on probabilistic graph modeling:\n\nEstimate how often an annotator returns non-primary labels, $p_\\text{flip}$\nPer sample, get an adjusted label distribution $p^*$ of primary labels based on $p_\\text{flip}$\nSample from $p^*$ as a new test set.\nMeasure performance metrics against the new test set.\n\nGiven $C$-category classification, the sampling process of the generative model is stated as follows:\n\n$$\n\\begin{aligned}\ny^*\\mid x &\\sim \\text{Categorial}([C], p^*(y\\mid x)) \\\\\ny_\\text{other}\\mid y^* &\\sim \\text{Categorial}([C]\\setminus\\{y^*\\}, \\frac{1}{C-1}) \\\\\nz_\\text{flip} \\mid x &\\sim \\text{Bernoulli}(p_\\text{flip}(x)) \\\\\ny\\mid y^*, y_\\text{other}, z_\\text{flip} &= y^* (1 - z_\\text{flip}) + y_\\text{other} z_\\text{flip}\n\\end{aligned}\n$$\n\nGiven the true $p(y\\mid x)$ and $p_\\text{flip}$ that can be estimated from the data, we would update the label distribution of primary labels:\n\n$$\np^*(y\\mid x) = \\frac{p(y\\mid x) - \\frac{p_\\text{flip}(x)}{C-1}}{1 - \\frac{C \\cdot p_\\text{flip}(x)}{C - 1}}\n$$\n\nA new test set sampled from $p^*(y \\mid x)$ represents the primary labels with individual inconsistency noise removed. It can be used for evaluation, as a noise-free test set.\nTo capture systematic disagreement among annotators when learning to predict labels, Davani et al. (2021) experimented with a multi-annotator model where predicting each annotator\u2019s labels is treated as one sub-task. Say, the classification task is defined on an annotated dataset $D=(X, A, Y)$, where $X$ is the text instances, $A$ is the set of annotators and $Y$ is the annotation matrix, $y_{ij} \\in Y$ represents a binary label assigned by $a_j \\in A$ to the sample $x_i \\in X$. The majority vote for $x_i$ is denoted as $\\bar{y}_{i,}$. The experiment is to train a classification head on top of a pre-trained BERT model and compares 4 setups:\n\nBaseline: Directly predict the majority vote $\\bar{y}_i$, not using the full annotation matrix $Y$.\nEnsemble: Train one model per annotator separately to predict $y_{ij}$ and then the results are aggregated by majority vote.\nMulti-label: Learn to predict $\\vert A \\vert$ labels to represent all annotators\u2019 labels per sample $\\langle y_{i1}, \\dots, y_{i\\vert A \\vert} \\rangle$, with a shared MLP layer and then outputs are aggregated.\nMulti-task: Similar to multi-label, but each annotator\u2019s prediction head is learned from a separated MLP layer, such that we allocate extra compute to learn the difference among annotators.\n\nExperiment results on the GHC (Gab Hate Corpus) dataset showed that the multi-task model achieves the best F1 score and also can naturally provide prediction uncertainty estimation, correlated with annotation disagreement.\n\nFig. 6. Illustration of different architectures for modeling multiple annotators' labels. (Image source: Davani et al. 2021)\nJury Learning (Gordon et al. 2022) mimics the jury process by modeling the different annotators\u2019 labeling behavior conditioned on their characteristics. Starting with a dataset with labels and demographic characteristics of each labeler, we train a model to learn to predict labels made by every individual annotator, each as a potential juror. At decision time, practitioners can specify the composition of a group of jurors to determine a sampling strategy. The final decision is made by aggregating labels from jurors from multiple trials.\n\nFig. 7. Illustration of how jury learning works. (Image source: Gordon et al. 2022)\nThe jury learning model is a DCN (Deep & Cross network) , commonly for recommendation use case,  that is jointly trained to learn comment embedding, annotator embedding and group (annotator\u2019s characteristics) embedding. The text content is processed by a pre-trained BERT, which is also jointly fine-tuned but for a shorter period to avoid overfitting.\n\nFig. 8. DCN model architecture for jury learning. (Image source: Gordon et al. 2022)\nTheir experiment runs on the toxicity diversity dataset and compares jury learning with a baseline model which is a fine-tuned BERT to predict individual annotator\u2019s label without using metadata. Performance is measured in MAE (mean absolute error). Jury learning consistently outperforms the annotator-agnostic baseline on the full test set as well as each group segment.\n\nFig. 9. Experiment results comparing an annotator-agnostic baseline with jury learning. (Image source: Gordon et al. 2022)\nData Quality \u2194 Model Training#\nOnce a dataset is constructed, many methods can help identify mislabels according to the training dynamics. Note that we only focus on methods to find and exclude data points with potentially incorrect labels, not about how to train a model with noisy data.\nInfluence Functions#\nInfluence functions is a classic technique from robust statistics (Hampel, 1974) to measure the effect of training data points by describing how the model parameters change as we upweight a training point by an infinitesimal amount. Koh & Liang (2017) introduced the concept to be applied to deep neural networks.\nGiven $n$ data samples in the train set, $z_i = (x_i, y_i)$ for $i =1, \\dots, n$, The model parameter $\\theta$ is optimized to minimize a loss: $\\hat{\\theta} = \\arg\\min_{\\theta \\in \\Theta} \\frac{1}{n}\\sum_{i=1}^n \\mathcal{L}(z_i, \\theta)$. The change of model parameters after we remove a single data point $z$ is denoted as $\\hat{\\theta}_{-z} - \\hat{\\theta}$ where $\\hat{\\theta}_{-z} = \\arg\\min_{\\theta \\in \\Theta} \\frac{1}{n} \\sum_{z_i \\neq z} \\mathcal{L}(z_i, \\theta)$. However, computing this literally for every sample is too expensive. One way to approximate this is to compute the parameter change given a small upweight $\\epsilon$ on $z$. By definition, the influence of upweighting $z$ by $\\epsilon$ is given by:\n\n$$\n\\mathcal{I}_{\\text{up,params}}(z) = \\frac{d\\hat{\\theta}_{\\epsilon,z}}{d\\epsilon}\\bigg\\vert_{\\epsilon=0}=-\\mathbf{H}^{-1}_{\\hat{\\theta}} \\nabla_\\theta \\mathcal{L}(z, \\hat{\\theta})\n$$\n\nwhere $\\hat{\\theta}_{\\epsilon,z} = \\arg\\min_{\\theta \\in \\Theta} \\frac{1}{n}\\sum_{i=1}^n \\mathcal{L}(z_i, \\theta) + \\epsilon L(z, \\theta)$ and $\\mathbf{H}^{-1}_{\\hat{\\theta}} = \\frac{1}{n}\\sum_{i=1}^n \\nabla^2_\\theta \\mathcal{L}(z_i, \\hat{\\theta})$.\nRemoving a data point $x$ is equivalent to upweighting it by $\\epsilon = -\\frac{1}{n}$ and therefore $\\hat{\\theta}_{-z} - \\hat{\\theta} \\approx -\\frac{1}{n} \\mathcal{I}_{\\text{up,params}}(z)$.\nThe influence of upweighting $z$ on the loss at a test point $z_\\text{test}$ is given by applying the chain rule:\n\n$$\n\\begin{aligned}\n\\mathcal{I}_{\\text{up,loss}}(z, z_\\text{test}) \n&= \\frac{d \\mathcal{L}(z_\\text{test}, \\hat{\\theta}_{\\epsilon,z})}{d\\epsilon}\\bigg\\vert_{\\epsilon=0} \\\\\n&= \\nabla_\\theta \\mathcal{L}(z_\\text{test}, \\hat{\\theta})^\\top \\frac{d \\hat{\\theta}_{\\epsilon,z}}{d\\epsilon}\\bigg\\vert_{\\epsilon=0} \\\\\n&= - \\nabla_\\theta \\mathcal{L}(z_\\text{test}, \\hat{\\theta})^\\top \\mathbf{H}^{-1}_{\\hat{\\theta}} \\nabla_\\theta \\mathcal{L}(z, \\hat{\\theta})\n\\end{aligned}\n$$\n\nUsing the influence function we can measure the effect of a single data point on model parameters and loss function in closed forms. It can help approximate leave-one-out retraining without actually running all the retraining. To identify mislabeled data, we can measure $\\mathcal{I}_\\text{up,loss}(z_i, z_i)$, approximating the prediction error on $z_i$ if $z_i$ is removed from the training set.\n\nFig. 10. Influence functions values match leave-one-out training results on 10-class MNIST. (Image source: Kohn & Liang, 2017)\nGiven the closed form, influence functions is still hard to be scaled up because the inverse Hessian vector product is hard to compute. Grosse et al. (2023) experimented with the EK-FAC (Eigenvalue-corrected Kronecker-Factored Approximate Curvature; George et al. 2018) approximation instead.\nPrediction Changes during Training#\nAnother branch of methods are to track the changes of model prediction during training to identify cases which seem hard to be learned. Data Maps (Swayamdipta et al. 2020) tracks two attributes of model behavior dynamics during training to analyze the quality of dataset:\n\nConfidence: The model\u2019s confidence in the true label, defined as the mean model probability of the true label across epochs. They also used a coarse-grained metric, \u201ccorrectness\u201d, defined as the fraction of times when the model predicts the correct label across epochs.\nVariability: The variation of the confidence, defined as the standard deviation of model probability of the true label across epochs.\n\n\nFig. 11. Data map for SNLI training set, based on a RoBERTa classifier. (Image source: Swayamdipta et al. 2020)\nHard-to-learn (low confidence, low variability) samples are more likely to be mislabeled. They ran an experiment on WinoGrande dataset with 1% flipped label data. After retraining, flipped instances move to the lower confidence and slightly higher variability regions, indicating that the hard-to-learn regions contains mislabeled samples. Given this, we can train a classifier on equal numbers of label flipped and clean samples using only the confidence score (unsure why the paper didn\u2019t use both confidence and variability as features). This simple noise classifier then can be used on the original dataset to identify potentially mislabeled instances.\n\nFig. 12. Data points originally with high confidence and low variability scores moved to low confidence, slightly higher variability regions after labels get flipped. (Image source: Swayamdipta et al. 2020)\nHowever, we should not consider all hard-to-learn samples to be incorrect. In fact, the paper hypothesizes that ambiguous (high variability) and hard-to-learn (low confidence, low variability) samples are more informative for learning. Experiments showed that they are good for OOD generalization, giving better results on OOD eval, even in comparison to 100% training set.\nTo investigate whether neural networks have a tendency to forget previously learned information, Mariya Toneva et al. (2019) designed an experiment: They track the model prediction for each sample during the training process and count the transitions for each sample from being classified correctly to incorrectly or vice-versa. Then samples can be categorized accordingly,\n\nForgettable (redundant) samples: If the class label changes across training epochs.\nUnforgettable samples: If the class label assignment is consistent across training epochs. Those samples are never forgotten once learned.\n\nThey found that there are a large number of unforgettable examples that are never forgotten once learnt. Examples with noisy labels or images with \u201cuncommon\u201d features (visually complicated to classify) are among the most forgotten examples. The experiments empirically validated that unforgettable examples can be safely removed without compromising model performance.\nIn the implementation, the forgetting event is only counted when a sample is included in the current training batch; that is, they compute forgetting across presentations of the same example in subsequent mini-batches. The number of forgetting events per sample is quite stable across different seeds and forgettable examples have a small tendency to be first-time learned later in the training. The forgetting events are also found to be transferable throughout the training period and between architectures.\nPleiss, et al. (2020) developed a method named AUM (Area under the Margin) to spot wrong labels based on such an assumption: Say, a BIRD image is mistakenly marked as DOG. The gradient update would encourage generalization from other BIRD images to this BIRD image, while the DOG label provides an incorrect supervised signal to encourage the update to go another way. Hence, there exists tension between generalization and (wrong) prediction in gradient update signals.\nGiven a classification dataset $(\\mathbf{x}, y) \\in \\mathcal{D}_\\text{train}$, let $z^{(t)}_i(\\mathbf{x}) \\in \\mathbb{R}$ be the logit corresponding to class $i$ at epoch $t$. The margin at epoch $t$ is the difference between the assigned logit and the next largest logit:\n\n$$\nM^{(t)}(\\mathbf{x}, y) = z_y^{(t)}(\\mathbf{x}) - \\max_{i \\neq y} z^{(t)}_i(\\mathbf{x}),\\quad\n\\text{AUM}(\\mathbf{x}, y) = \\frac{1}{T} \\sum^T_{t=1} M^{(t)}(\\mathbf{x}, y)\n$$\n\nA negative margin indicates a wrong prediction and a large positive margin suggests high confidence in a correct prediction. The hypothesis is that mislabeled samples would have a smaller margin than correct samples due to the tension of generalization via SGD triggered by other samples.\nIn order to determine the threshold, they insert fake data, named \u201cthreshold samples\u201d, to determine the threshold:\n\nCreate a subset of threshold samples $\\mathcal{D}_\\text{thr}$.  If there are $N$ training samples for $C$ classes, we randomly sample $N/(C+1)$ samples and switch all their labels to a fake new class $C+1$.\nMerge threshold samples into the original dataset: $\\mathcal{D}\u2019 = { (\\mathbf{x}, C+1): \\mathbf{x} \\in \\mathcal{D}_\\text{thr}} \\cup (\\mathcal{D} \\setminus\\mathcal{D}_\\text{thr})$;\nTrain the model on $\\mathcal{D}\u2019$ and measure AUM of all the data;\nCompute the threshold $\\alpha$ as the 99th percentile of AUM of threshold samples;\nIdentify mislabeled data using $\\alpha$ a threshold: ${(\\mathbf{x}, y) \\in \\mathcal{D} \\setminus \\mathcal{D}_\\text{thr}: \\text{AUM}_{\\mathbf{x}, y} \\leq \\alpha}$\n\n\nFig. 13. How the AUM of threshold samples help separate out mislabeled samples. (Image source: Pleiss et al. 2020)\n\nFig. 14. Test error on CIFAR 10/100 with randomly mislabeled samples, comparing different methods for data filter or noisy data training. (Image source: Pleiss et al. 2020)\nNoisy Cross-Validation#\nThe NCV (Noisy Cross-Validation) method (Chen et al. 2019) divides the dataset into half at random, and then identifies data samples as \u201cclean\u201d if its label matches the predicted label provided by the model that is only trained on the other half of the dataset. Clean samples are expected to be more trustworthy. INCV (Iterative Noisy Cross-Validation) runs NCV iteratively where more clean samples are added into the trusted candidate set $\\mathcal{C}$ and more noisy samples are removed.\n\nFig. 15. Algorithm of INCV (iterative noisy cross-validation). (Image source: Chen et al. 2019)\nCitation#\nCited as:\n\nWeng, Lilian. (Feb 2024). \u201cThinking about High-Quality Human Data\u201d. Lil\u2019Log. https://lilianweng.github.io/posts/2024-02-05-human-data-quality/.\n\nOr\n@article{weng2024humandata,\n  title   = \"Thinking about High-Quality Human Data\",\n  author  = \"Weng, Lilian\",\n  journal = \"lilianweng.github.io\",\n  year    = \"2024\",\n  month   = \"Feb\",\n  url     = \"https://lilianweng.github.io/posts/2024-02-05-human-data-quality/\"\n}\nReferences#\n[1] Francis Galton \u201cVox populi\u201d  Nature 75, 450-451 (1907).\n[2] Sambasivan et al. \u201cEveryone wants to do the model work, not the data work\u201d: Data Cascades in High-Stakes AI\" CHI 2021\n[3] Chris Callison-Burch. \u201cFast, Cheap, and Creative: Evaluating Translation Quality Using Amazon\u2019s Mechanical Turk\u201d EMNLP 2009\n[4] Rottger et al. \u201cTwo Contrasting Data Annotation Paradigms for Subjective NLP Tasks\u201d NAACL 2022.\n[5] Aroyo & Welty \u201cTruth Is a Lie: Crowd Truth and the Seven Myths of Human Annotation\u201d AI Magazine\u00a036.1: 15-24 (2015).\n[6] Hovy et al. \u201cLearning Whom to Trust with MACE\u201d NAACL-HLT 2013.\n[7] Wang et al. \u201cAll that Agrees Is Not Gold: Evaluating Ground Truth Labels and Dialogue Content for Safety\u201d 2023.\n[8] Zhang et al. \u201cA Taxonomy of Rater Disagreements: Surveying Challenges & Opportunities from the Perspective of Annotating Online Toxicity\u201d arXiv preprint arXiv:2311.04345\u00a0(2023).\n[9] Davani et al. \u201cDealing with disagreements: Looking beyond the majority vote in subjective annotations\u201d ACL 2022.\n[10] Gordon et al. \u201cJury Learning: Integrating Dissenting Voices into Machine Learning Models\u201d CHI 2022.\n[11] Gordon et al. \u201cThe Disagreement Deconvolution: Bringing Machine Learning Performance Metrics In Line With Reality\u201d CHI 2021\n[12] Daniel et al. 2018 \u201cQuality Control in Crowdsourcing: A Survey of Quality Attributes, Assessment Techniques, and Assurance Actions\u201d ACM Computing Surveys (CSUR), 51(1), 1-40 (2018).\n[13] Koh & Liang. \u201cUnderstanding Black-box Predictions via Influence Functions\u201d ICML 2017.\n[14] Grosse et al. \u201cStudying Large Language Model Generalization with Influence Functions\u201d arXiv preprint arXiv:2308.03296 (2023).\n[15] Swayamdipta et al. \u201cDataset Cartography: Mapping and Diagnosing Datasets with Training Dynamics\u201d EMNLP 2020.\n[16] Toneva, et al. \u201cAn Empirical Study of Example Forgetting during Deep Neural Network Learning\u201d ICLR 2019.\n[17] Pleiss, et al.  \u201cIdentifying Mislabeled Data using the Area Under the Margin Ranking\u201d NeuriPS 2020.\n[18] Chen et al. \u201cUnderstanding and utilizing deep neural networks trained with noisy labels\u201d ICML 2019.\n\n\n\ndata\ndata-quality\nhuman-ai\n\n\n\n\u00ab \n\nDiffusion Models for Video Generation\n\n\n \u00bb\n\nAdversarial Attacks on LLMs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a9 2024 Lil'Log\n\n        Powered by\n        Hugo &\n        PaperMod\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "type": "Document"}}